#include <stdio.h>
#include <string.h>

#define SIZE 10

struct node {
    char letter;
    int value;
};

int use[SIZE] = {0}; // set 1, when one character is assigned previously

int isValid(struct node* nodeList, int count, char* s1, char* s2, char* s3) {
    int val1 = 0, val2 = 0, val3 = 0, m = 1, j, i;
    for (i = strlen(s1) - 1; i >= 0; i--) { // find number for the first string
        char ch = s1[i];
        for (j = 0; j < count; j++) {
            if (nodeList[j].letter == ch) { // when ch is present, break the loop
                break;
            }
        }
        val1 += m * nodeList[j].value;
        m *= 10;
    }
    m = 1;
    for (i = strlen(s2) - 1; i >= 0; i--) { // find number for the second string
        char ch = s2[i];
        for (j = 0; j < count; j++) {
            if (nodeList[j].letter == ch) {
                break;
            }
        }
        val2 += m * nodeList[j].value;
        m *= 10;
    }
    m = 1;
    for (i = strlen(s3) - 1; i >= 0; i--) { // find number for the third string
        char ch = s3[i];
        for (j = 0; j < count; j++) {
            if (nodeList[j].letter == ch) {
                break;
            }
        }
        val3 += m * nodeList[j].value;
        m *= 10;
    }
    if (val3 == (val1 + val2)) { // check whether the sum is the same as the 3rd string or not
        return 1;
    }
    return 0;
}

int permutation(int count, struct node* nodeList, int n, char* s1, char* s2, char* s3) {
    if (n == count - 1) { // when values are assigned for all characters
        for (int i = 0; i < 10; i++) {
            if (use[i] == 0) { // for those numbers, which are not used
                nodeList[n].value = i; // assign value i
                if (isValid(nodeList, count, s1, s2, s3) == 1) { // check validation
                    printf("Solution found:");
                    for (int j = 0; j < count; j++) { // print code, which are assigned
                        printf(" %c = %d", nodeList[j].letter, nodeList[j].value);
                    }
                    printf("\n");
                    return 1;
                }
            }
        }
        return 0;
    }
    for (int i = 0; i < 10; i++) {
        if (use[i] == 0) { // for those numbers, which are not used
            nodeList[n].value = i; // assign value i and mark as not available for future use
            use[i] = 1;
            if (permutation(count, nodeList, n + 1, s1, s2, s3)) { // go for next characters
                return 1;
            }
            use[i] = 0; // when backtracks, make available again
        }
    }
    return 0;
}

int solvePuzzle(char* s1, char* s2, char* s3) {
    int uniqueChar = 0; // Number of unique characters
    int len1 = strlen(s1);
    int len2 = strlen(s2);
    int len3 = strlen(s3);
    int freq[26] = {0}; // There are 26 different characters

    for (int i = 0; i < len1; i++) {
        freq[s1[i] - 'A']++;
    }
    for (int i = 0; i < len2; i++) {
        freq[s2[i] - 'A']++;
    }
    for (int i = 0; i < len3; i++) {
        freq[s3[i] - 'A']++;
    }
    for (int i = 0; i < 26; i++) {
        if (freq[i] > 0) { // whose frequency is > 0, they are present
            uniqueChar++;
        }
    }
    if (uniqueChar > 10) { // as there are 10 digits in the decimal system
        printf("Invalid strings\n");
        return 0;
    }
    struct node nodeList[uniqueChar];
    for (int i = 0, j = 0; i < 26; i++) { // assign all characters found in three strings
        if (freq[i] > 0) {
            nodeList[j].letter = (char)(i + 'A');
            j++;
        }
    }
    return permutation(uniqueChar, nodeList, 0, s1, s2, s3);
}

int main() {
    char s1[] = "TO";
    char s2[] = "GO";
    char s3[] = "OUT";
    if (!solvePuzzle(s1, s2, s3)) {
        printf("No solution\n");
    }
    return 0;
}
